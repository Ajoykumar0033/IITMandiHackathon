{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11e86b3e-dec4-44c5-96b2-caa3f7901f89",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from tensorflow.keras.models import load_model\n",
    "\n",
    "model = load_model(r\"C:\\models\\lstm_full_94.h5\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "66f51211-5882-4315-8cc6-4703250ae011",
   "metadata": {},
   "outputs": [],
   "source": [
    "import librosa\n",
    "import numpy as np\n",
    "\n",
    "def load_and_pad(file_path, sr=16000):\n",
    "    try:\n",
    "        y, _ = librosa.load(file_path, sr=sr)\n",
    "        if len(y) < sr:\n",
    "            y = np.pad(y, (0, sr - len(y)))\n",
    "        return y\n",
    "    except:\n",
    "        return None\n",
    "\n",
    "def preprocess_single_file(file_path, sr=16000, n_mfcc=40):\n",
    "    y = load_and_pad(file_path, sr=sr)\n",
    "    if y is None:\n",
    "        raise ValueError(\"Audio loading failed\")\n",
    "\n",
    "    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc)\n",
    "    mfcc = (mfcc - np.mean(mfcc)) / (np.std(mfcc) + 1e-8)\n",
    "\n",
    "    if mfcc.shape[1] < 64:\n",
    "        pad_width = 64 - mfcc.shape[1]\n",
    "        mfcc = np.pad(mfcc, ((0, 0), (0, pad_width)))\n",
    "    else:\n",
    "        mfcc = mfcc[:, :64]\n",
    "\n",
    "    mfcc = np.expand_dims(mfcc, axis=-1)\n",
    "    mfcc = np.expand_dims(mfcc, axis=0)\n",
    "    return mfcc\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "909e83bb-8fd7-437c-bfcd-cbc0590c0830",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import load_model\n",
    "import numpy as np\n",
    "\n",
    "model = load_model(\"C:\\models\\lstm_full_94.h5\")\n",
    "raw_file = r\"C:\\Users\\IIT - MANDI\\Downloads\\test_audio\\Real.wav\"\n",
    "processed_sample = preprocess_single_file(raw_file)\n",
    "\n",
    "prediction = model.predict(processed_sample)\n",
    "predicted_class = np.argmax(prediction)\n",
    "class_names = ['real', 'fake']\n",
    "print(f\"Predicted Class: {class_names[predicted_class]}, Confidence: {prediction[0][predicted_class]:.4f}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
