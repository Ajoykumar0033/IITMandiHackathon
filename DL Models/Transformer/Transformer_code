{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "951dad98-5681-4933-a705-300a8602944d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training files: 53868, Validation files: 10798, Test files: 4634\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import torchaudio\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "\n",
    "# Function to load files from directories\n",
    "def load_files_from_dir(data_dir):\n",
    "    file_paths = []\n",
    "    labels = []\n",
    "    for label, subdir in enumerate(['real', 'fake']):  # 0=fake, 1=real\n",
    "        subdir_path = os.path.join(data_dir, subdir)\n",
    "        for filename in os.listdir(subdir_path):\n",
    "            if filename.endswith('.wav'):\n",
    "                file_paths.append(os.path.join(subdir_path, filename))\n",
    "                labels.append(label)\n",
    "    return file_paths, labels\n",
    "\n",
    "# Load training, testing, and validation data\n",
    "train_dir = r\"C:\\Users\\IIT - MANDI\\Downloads\\archive (5)\\for-norm\\for-norm\\training\"\n",
    "valid_dir = r\"C:\\Users\\IIT - MANDI\\Downloads\\archive (5)\\for-norm\\for-norm\\validation\"\n",
    "test_dir = r\"C:\\Users\\IIT - MANDI\\Downloads\\archive (5)\\for-norm\\for-norm\\testing\"\n",
    "\n",
    "train_files, train_labels = load_files_from_dir(train_dir)\n",
    "valid_files, valid_labels = load_files_from_dir(valid_dir)\n",
    "test_files, test_labels = load_files_from_dir(test_dir)\n",
    "\n",
    "print(f\"Training files: {len(train_files)}, Validation files: {len(valid_files)}, Test files: {len(test_files)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "583cebec-8ff4-420a-8ab7-0dc4268bf4d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torchaudio\n",
    "\n",
    "\n",
    "def preprocess_raw_audio(path, target_sr=16000, clip_duration=2.0):\n",
    "    waveform, sr = torchaudio.load(path)\n",
    "    \n",
    "    # Convert to mono if stereo\n",
    "    if waveform.shape[0] > 1:\n",
    "        waveform = waveform.mean(dim=0, keepdim=True)\n",
    "    \n",
    "    # Resample to target sample rate\n",
    "    if sr != target_sr:\n",
    "        resampler = torchaudio.transforms.Resample(orig_freq=sr, new_freq=target_sr)\n",
    "        waveform = resampler(waveform)\n",
    "\n",
    "    # Crop or pad to fixed length (e.g., 2 seconds = 32000 samples)\n",
    "    num_samples = int(target_sr * clip_duration)\n",
    "    if waveform.shape[1] > num_samples:\n",
    "        waveform = waveform[:, :num_samples]\n",
    "    elif waveform.shape[1] < num_samples:\n",
    "        pad = num_samples - waveform.shape[1]\n",
    "        waveform = torch.nn.functional.pad(waveform, (0, pad))\n",
    "    \n",
    "    return waveform.squeeze(0)  # [samples]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cc170e91-051d-470d-a687-56296d081cca",
   "metadata": {},
   "outputs": [],
   "source": [
    "class RawAudioDataset(Dataset):\n",
    "    def __init__(self, file_paths, labels, target_sr=16000, clip_duration=2.0):\n",
    "        self.file_paths = file_paths\n",
    "        self.labels = labels\n",
    "        self.target_sr = target_sr\n",
    "        self.clip_duration = clip_duration\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        # Load and preprocess the audio file\n",
    "        waveform = preprocess_raw_audio(self.file_paths[idx], self.target_sr, self.clip_duration)\n",
    "        label = self.labels[idx]\n",
    "        return waveform, label\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.file_paths)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f12fdf77-66ff-4fbe-9726-d95b7236ec64",
   "metadata": {},
   "outputs": [],
   "source": [
    "class RawAudioTransformer(nn.Module):\n",
    "    def __init__(self, input_dim=400, d_model=256, num_heads=4, num_layers=4, num_classes=2, frame_size=400):\n",
    "        super().__init__()\n",
    "        self.frame_size = frame_size  # Size of each input frame\n",
    "        self.input_proj = nn.Linear(frame_size, d_model)  # Projecting the input frame to model dimension\n",
    "        encoder_layer = nn.TransformerEncoderLayer(d_model, num_heads)\n",
    "        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers)\n",
    "        self.pool = nn.AdaptiveAvgPool1d(1)  # Global average pooling to reduce sequence dimension\n",
    "        self.classifier = nn.Linear(d_model, num_classes)\n",
    "        self.positional_encoding = self.get_positional_encoding(d_model, 5000)  # Example of max sequence length\n",
    "\n",
    "    def get_positional_encoding(self, d_model, max_len):\n",
    "        # Sinusoidal positional encoding\n",
    "        pe = torch.zeros(max_len, d_model)\n",
    "        position = torch.arange(0, max_len).unsqueeze(1).float()\n",
    "        div_term = torch.exp(torch.arange(0, d_model, 2).float() * -(math.log(10000.0) / d_model))\n",
    "        pe[:, 0::2] = torch.sin(position * div_term)\n",
    "        pe[:, 1::2] = torch.cos(position * div_term)\n",
    "        return pe\n",
    "\n",
    "    def forward(self, x):  # x: [batch_size, seq_len * frame_size]\n",
    "        seq_len = x.shape[1] // self.frame_size\n",
    "        x = x.view(x.shape[0], seq_len, self.frame_size)\n",
    "\n",
    "        # Project each frame to the model dimension (d_model)\n",
    "        x = self.input_proj(x)  # [batch_size, seq_len, d_model]\n",
    "\n",
    "        # Add positional encoding\n",
    "        x = x + self.positional_encoding[:x.size(1), :].to(x.device)\n",
    "\n",
    "        # Apply the transformer encoder\n",
    "        x = self.transformer(x)  # [batch_size, seq_len, d_model]\n",
    "\n",
    "        # Global average pooling across the sequence dimension (seq_len)\n",
    "        x = x.transpose(1, 2)  # [batch_size, d_model, seq_len]\n",
    "        x = self.pool(x).squeeze(-1)  # [batch_size, d_model]\n",
    "\n",
    "        # Classification layer\n",
    "        return self.classifier(x)  # [batch_size, 2]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b5df66dc-7327-493f-8ebd-02afc1f1cb8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "class RawAudioTransformer(nn.Module):\n",
    "    def __init__(self, input_dim=400, d_model=256, num_heads=4, num_layers=4, num_classes=2, frame_size=400):\n",
    "        super().__init__()\n",
    "        self.frame_size = frame_size  # Size of each input frame\n",
    "        self.input_proj = nn.Linear(frame_size, d_model)  # Projecting the input frame to model dimension\n",
    "        encoder_layer = nn.TransformerEncoderLayer(d_model, num_heads)\n",
    "        self.transformer = nn.TransformerEncoder(encoder_layer, num_layers)\n",
    "        self.pool = nn.AdaptiveAvgPool1d(1)  # Global average pooling to reduce sequence dimension\n",
    "        self.classifier = nn.Linear(d_model, num_classes)\n",
    "\n",
    "    def forward(self, x):  # x: [batch_size, seq_len * frame_size]\n",
    "        # Reshape the input: [batch_size, seq_len, frame_size]\n",
    "        seq_len = x.shape[1] // self.frame_size\n",
    "        x = x.view(x.shape[0], seq_len, self.frame_size)\n",
    "        \n",
    "        # Project each frame to the model dimension (d_model)\n",
    "        x = self.input_proj(x)  # [batch_size, seq_len, d_model]\n",
    "        \n",
    "        # Apply the transformer encoder\n",
    "        x = self.transformer(x)  # [batch_size, seq_len, d_model]\n",
    "        \n",
    "        # Global average pooling across the sequence dimension (seq_len)\n",
    "        x = x.transpose(1, 2)  # [batch_size, d_model, seq_len]\n",
    "        x = self.pool(x).squeeze(-1)  # [batch_size, d_model]\n",
    "        \n",
    "        # Classification layer\n",
    "        return self.classifier(x)  # [batch_size, 2] (for real/fake classification)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7bd8baae-7214-471e-a89c-c401ff6e3345",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create dataset instances\n",
    "train_dataset = RawAudioDataset(train_files, train_labels)\n",
    "valid_dataset = RawAudioDataset(valid_files, valid_labels)\n",
    "test_dataset  = RawAudioDataset(test_files, test_labels)\n",
    "\n",
    "# Create data loaders\n",
    "train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n",
    "valid_loader = DataLoader(valid_dataset, batch_size=16)\n",
    "test_loader  = DataLoader(test_dataset, batch_size=16)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bd2a94c7-ae9a-4777-a761-91ed9bc284a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\IIT - MANDI\\anaconda3\\Lib\\site-packages\\torch\\nn\\modules\\transformer.py:379: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.self_attn.batch_first was not True(use batch_first for better inference performance)\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1, Loss: 0.8961472511291504\n",
      "Validation Accuracy: 86.04%\n",
      "Epoch 2, Loss: 0.013563345186412334\n",
      "Validation Accuracy: 89.71%\n",
      "Epoch 3, Loss: 0.4196728765964508\n",
      "Validation Accuracy: 93.53%\n",
      "Epoch 4, Loss: 0.008894817903637886\n",
      "Validation Accuracy: 90.75%\n",
      "Epoch 5, Loss: 0.021588066592812538\n",
      "Validation Accuracy: 94.70%\n",
      "Epoch 6, Loss: 0.16780652105808258\n",
      "Validation Accuracy: 93.85%\n",
      "Epoch 7, Loss: 0.11217416077852249\n",
      "Validation Accuracy: 95.86%\n",
      "Epoch 8, Loss: 0.008493254892528057\n",
      "Validation Accuracy: 95.53%\n",
      "Epoch 9, Loss: 0.04001355171203613\n",
      "Validation Accuracy: 96.05%\n",
      "Epoch 10, Loss: 0.0014153103111311793\n",
      "Validation Accuracy: 96.43%\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.optim as optim\n",
    "from torch import nn\n",
    "from sklearn.utils.class_weight import compute_class_weight\n",
    "import numpy as np\n",
    "\n",
    "# Set device\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "# Initialize model, loss, and optimizer\n",
    "model = RawAudioTransformer(input_dim=400, d_model=256, num_heads=4, num_layers=4, num_classes=2).to(device)\n",
    "optimizer = optim.Adam(model.parameters(), lr=1e-4)\n",
    "\n",
    "# Compute class weights\n",
    "class_weights = compute_class_weight(class_weight='balanced', classes=np.unique(train_labels), y=train_labels)\n",
    "class_weights_tensor = torch.tensor(class_weights, dtype=torch.float).to(device)\n",
    "\n",
    "# Use weighted loss\n",
    "criterion = nn.CrossEntropyLoss(weight=class_weights_tensor)\n",
    "\n",
    "# Training loop\n",
    "num_epochs = 10\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    for batch_data, batch_labels in train_loader:\n",
    "        batch_data = batch_data.to(device)\n",
    "        batch_labels = batch_labels.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "        output = model(batch_data)  # Forward pass\n",
    "        loss = criterion(output, batch_labels)  # Calculate loss\n",
    "        loss.backward()  # Backpropagate\n",
    "        optimizer.step()  # Update model parameters\n",
    "        \n",
    "    print(f'Epoch {epoch+1}, Loss: {loss.item()}')\n",
    "\n",
    "    # Validate after each epoch\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        total_correct = 0\n",
    "        total_samples = 0\n",
    "        for batch_data, batch_labels in valid_loader:\n",
    "            batch_data = batch_data.to(device)\n",
    "            batch_labels = batch_labels.to(device)\n",
    "\n",
    "            output = model(batch_data)\n",
    "            _, predicted = torch.max(output, 1)\n",
    "            total_samples += batch_labels.size(0)\n",
    "            total_correct += (predicted == batch_labels).sum().item()\n",
    "        accuracy = total_correct / total_samples\n",
    "        print(f\"Validation Accuracy: {accuracy * 100:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7e32ab4e-a2bf-45fa-b2bd-fa9ee7cf3938",
   "metadata": {},
   "outputs": [],
   "source": [
    "torch.save(model, 'New_Transformer_model.pkl')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d6331a81-3b5e-4db0-ba00-854bc4c2f600",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\IIT - MANDI\\AppData\\Local\\Temp\\ipykernel_4636\\2988353713.py:4: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model = torch.load('New_Transformer_model.pkl')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RawAudioTransformer(\n",
       "  (input_proj): Linear(in_features=400, out_features=256, bias=True)\n",
       "  (transformer): TransformerEncoder(\n",
       "    (layers): ModuleList(\n",
       "      (0-3): 4 x TransformerEncoderLayer(\n",
       "        (self_attn): MultiheadAttention(\n",
       "          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)\n",
       "        )\n",
       "        (linear1): Linear(in_features=256, out_features=2048, bias=True)\n",
       "        (dropout): Dropout(p=0.1, inplace=False)\n",
       "        (linear2): Linear(in_features=2048, out_features=256, bias=True)\n",
       "        (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n",
       "        (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n",
       "        (dropout1): Dropout(p=0.1, inplace=False)\n",
       "        (dropout2): Dropout(p=0.1, inplace=False)\n",
       "      )\n",
       "    )\n",
       "  )\n",
       "  (pool): AdaptiveAvgPool1d(output_size=1)\n",
       "  (classifier): Linear(in_features=256, out_features=2, bias=True)\n",
       ")"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "# Load the full model\n",
    "model = torch.load('New_Transformer_model.pkl')\n",
    "model.eval()  # Set to evaluation mode\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "model.to(device)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "adb4bc94-5ad4-49e2-bbbf-372c45276f6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inference Test Accuracy: 71.23%\n"
     ]
    }
   ],
   "source": [
    "correct = 0\n",
    "total = 0\n",
    "\n",
    "with torch.no_grad():\n",
    "    for data, labels in test_loader:\n",
    "        data = data.to(device)\n",
    "        labels = labels.to(device)\n",
    "        \n",
    "        outputs = model(data)\n",
    "        _, predicted = torch.max(outputs, 1)\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "\n",
    "accuracy = correct / total\n",
    "print(f\"Inference Test Accuracy: {accuracy * 100:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3080e869-de63-419e-a814-1c1119e3c22c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 71.23%\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        Fake       0.64      0.97      0.77      2264\n",
      "        Real       0.94      0.47      0.63      2370\n",
      "\n",
      "    accuracy                           0.71      4634\n",
      "   macro avg       0.79      0.72      0.70      4634\n",
      "weighted avg       0.79      0.71      0.69      4634\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def evaluate_model(model, test_loader):\n",
    "    model.eval()\n",
    "    device = next(model.parameters()).device\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for data, labels in test_loader:\n",
    "            data = data.to(device)\n",
    "            labels = labels.to(device)\n",
    "            outputs = model(data)\n",
    "            _, preds = torch.max(outputs, 1)\n",
    "            all_preds.extend(preds.cpu().numpy())\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "    # Compute metrics\n",
    "    accuracy = np.mean(np.array(all_preds) == np.array(all_labels))\n",
    "    print(f\"Test Accuracy: {accuracy * 100:.2f}%\\n\")\n",
    "\n",
    "    # Classification report\n",
    "    print(\"Classification Report:\")\n",
    "    print(classification_report(all_labels, all_preds, target_names=[\"Fake\", \"Real\"]))\n",
    "\n",
    "    # Confusion matrix\n",
    "    cm = confusion_matrix(all_labels, all_preds)\n",
    "    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[\"Fake\", \"Real\"])\n",
    "    disp.plot(cmap=plt.cm.Blues)\n",
    "    plt.title(\"Confusion Matrix\")\n",
    "    plt.show()\n",
    "evaluate_model(model, test_loader)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b563dd63-1fda-494c-ade5-3e420cab9e6b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
